# vim: set filetype=yaml.ansible :/
- name: "Dotfiles"
  vars:
    dotfiles: "{{ home }}/.dotfiles"
  block:
    - name: Cloning .dotfiles
      ansible.builtin.git:
        repo: "https://github.com/Qwox0/.dotfiles"
        dest: "{{ dotfiles }}"
        recursive: true
        update: true
      ignore_errors: true # skip this step on error

    # - name: Finding existing config directories
    #   vars:
    #     is_valid_line: "{{ (item | trim)[:1] != '#' }}"
    #     dest: "{{ home }}/{{ item.split(';')[1] | trim }}"
    #   ansible.builtin.stat:
    #     path: "{{ dest }}"
    #   loop: "{{ lookup('ansible.builtin.file', '{{ dotfiles }}/TARGETS').splitlines() }}"
    #   when: is_valid_line
    #   loop_control:
    #     label: "is \"{{ dest }}\" a directory?"
    #   register: existing_dest

    # - name: Removing existing config directories
    #   vars:
    #     path: "{{ item.stat.path | default(item.item) }}"
    #     is_dir: "{{ item.stat.isdir | default(false) }}"
    #   ansible.builtin.file:
    #     path: "{{ path }}"
    #     state: absent
    #   loop: "{{ existing_dest.results }}"
    #   when: item is succeeded and is_dir
    #   loop_control:
    #     label: "remove {{ path }}/"

    - name: Removing existing config directories
      vars:
        is_valid_line: "{{ (item | trim)[:1] != '#' }}"
        dest: "{{ home }}/{{ item.split(';')[1] | trim }}"
        changed: "{{ out.rc | default(1) == 0 }}"
      ansible.builtin.shell: "[ -d {{ dest }} -a ! -L {{ dest }} ] && rm -r {{ dest }}"
      register: out
      changed_when: changed
      failed_when: "out.stderr != ''"
      loop: "{{ lookup('ansible.builtin.file', '{{ dotfiles }}/TARGETS').splitlines() }}"
      when: is_valid_line
      loop_control:
        label: "{{ changed | ternary('remove directory: ' + dest, dest) }}"

    - name: Linking .dotfiles
      vars:
        is_valid_line: "{{ (item | trim)[:1] != '#' }}"
        dest: "{{ home }}/{{ item.split(';')[1] | trim }}"
        src: "{{ dotfiles }}/{{ item.split(';')[0] | trim }}"
      ansible.builtin.file:
        dest: "{{ dest }}"
        src: "{{ src | realpath }}"
        state: link
        force: true # replace existing files!
      loop: "{{ lookup('ansible.builtin.file', '{{ dotfiles }}/TARGETS').splitlines() }}"
      when: is_valid_line
      loop_control:
        label: "{{ dest }} -> {{ src | realpath }}"

  # stow
  # - name: Installing stow
  #   apt:
  #     name: stow
  #   tags:
  #     - dotfiles
  #     - stow
  #
  # - name: Stow dotfiles
  #   shell: cd $HOME/.dotfiles && ./ubuntu
  #   tags:
  #     - dotfiles
  #     - stow
